'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    return target;
};

exports.default = upgradeActivationRule;

function _objectWithoutProperties(obj, keys) {
    var target = {};
    for (var i in obj) {
        if (keys.indexOf(i) >= 0) continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
        target[i] = obj[i];
    }
    return target;
}

// @flow

/*:: import type {Visibility} from '../types/base';*/
/*:: import type {ActivationRule as ActivationRuleV0} from '../types/v00';*/
/*:: import type {ActivationRule as ActivationRuleV1} from '../types/v01';*/
/*:: import type {ActivationRule as ActivationRuleV2} from '../types/v02';*/
/*:: import type {ActivationRule as ActivationRuleV3} from '../types/v03';*/
/*:: import type {ActivationRule as ActivationRuleV4} from '../types/v04';*/
/*:: import type {ActivationRule as ActivationRuleV5} from '../types/v05';*/
/*:: import type {ActivationRule as ActivationRuleV6} from '../types/v06';*/
/*:: import type {ActivationRule as ActivationRuleV7} from '../types/v07';*/
/*:: import type {ActivationRule as ActivationRuleV8} from '../types/v08';*/
/*:: import type {ActivationRule as ActivationRuleV9} from '../types/v09';*/
/*:: import type {ActivationRule as ActivationRuleV10} from '../types/v10';*/
/*:: import type {ActivationRule as ActivationRuleV11} from '../types/v11';*/
/*:: import type {ActivationRule as ActivationRuleV12} from '../types/v12';*/
/*:: import type {ActivationRule as ActivationRuleV13} from '../types/v13';*/
/*:: import type {ActivationRule as ActivationRuleV14} from '../types/v14';*/
/*:: import type {ActivationRule as ActivationRuleV15} from '../types/v15';*/
/*:: import type {ActivationRule as ActivationRuleV16} from '../types/v16';*/
/*:: import type {ActivationRule as ActivationRuleV17} from '../types/v17';*/
/*:: import type {AnyActivationRule} from '../types';*/


var downgrade = {
    '17': function _(rule /*: ActivationRuleV17*/ ) /*: ActivationRuleV16*/ {
        var ubCode = rule.ubCode,
            clientUuid = rule.clientUuid,
            embUuid = rule.embUuid,
            variants = rule.variants,
            trigger = rule.trigger,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            meta = rule.meta,
            urlTargets = rule.urlTargets,
            cookieTargets = rule.cookieTargets,
            geoTargets = rule.geoTargets,
            scheduling = rule.scheduling;


        return {
            schemaVersion: 16,
            ubCode: ubCode,
            clientUuid: clientUuid,
            embUuid: embUuid,
            variants: variants,
            trigger: trigger,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            integrations: {
                googleAnalytics: {
                    enabled: rule.integrations.googleAnalytics.enabled
                }
            },
            event: event,
            version: version,
            parentVersion: parentVersion,
            meta: meta,
            urlTargets: urlTargets,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            scheduling: scheduling
        };
    },

    '16': function _(rule /*: ActivationRuleV16*/ ) /*: ActivationRuleV15*/ {
        var ubCode = rule.ubCode,
            clientUuid = rule.clientUuid,
            embUuid = rule.embUuid,
            variants = rule.variants,
            trigger = rule.trigger,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            integrations = rule.integrations,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            meta = rule.meta,
            urlTargets = rule.urlTargets,
            cookieTargets = rule.cookieTargets,
            geoTargets = rule.geoTargets,
            scheduling = rule.scheduling;


        var maxWeightVariant = variants.reduce(function(maxWeightVariant, variant) {
            return !maxWeightVariant || variant.weight > maxWeightVariant.weight ? variant : maxWeightVariant;
        }, null);

        return {
            schemaVersion: 15,
            ubCode: ubCode,
            clientUuid: clientUuid,
            embUuid: embUuid,
            variants: variants.map(function(variant) {
                return {
                    // Discard dimensions and display
                    letter: variant.letter,
                    trackingId: variant.trackingId,
                    weight: variant.weight
                };
            }),
            trigger: trigger,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            integrations: integrations,
            event: event,
            version: version,
            parentVersion: parentVersion,
            dimensions: maxWeightVariant ? maxWeightVariant.dimensions : {
                desktopEnabled: null,
                mobileEnabled: null,
                desktop: {
                    width: 0,
                    height: 0
                },
                mobile: {
                    width: 0,
                    height: 0
                }
            },
            meta: meta,
            urlTargets: urlTargets,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            scheduling: scheduling,
            displaySettings: maxWeightVariant ? maxWeightVariant.display : {
                name: 'overlay'
            }
        };
    },

    '15': function _(rule /*: ActivationRuleV15*/ ) /*: ActivationRuleV14*/ {
        var ubCode = rule.ubCode,
            clientUuid = rule.clientUuid,
            embUuid = rule.embUuid,
            variants = rule.variants,
            trigger = rule.trigger,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            integrations = rule.integrations,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            dimensions = rule.dimensions,
            meta = rule.meta,
            urlTargets = rule.urlTargets,
            cookieTargets = rule.cookieTargets,
            geoTargets = rule.geoTargets,
            scheduling = rule.scheduling,
            displaySettings = rule.displaySettings;


        return {
            schemaVersion: 14,
            ubCode: ubCode,
            clientUuid: clientUuid,
            embUuid: embUuid,
            variantLetter: variants.reduce(function(maxWeightVariant, variant) {
                return variant.weight > maxWeightVariant.weight ? variant : maxWeightVariant;
            }, {
                letter: 'a',
                weight: 0
            }).letter,
            trigger: trigger,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            integrations: integrations,
            event: event,
            version: version,
            parentVersion: parentVersion,
            dimensions: dimensions,
            meta: meta,
            urlTargets: urlTargets,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            scheduling: scheduling,
            displaySettings: displaySettings
        };
    },

    '14': function _(rule /*: ActivationRuleV14*/ ) /*: ActivationRuleV13*/ {
        var ubCode = rule.ubCode,
            clientUuid = rule.clientUuid,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            integrations = rule.integrations,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            dimensions = rule.dimensions,
            meta = rule.meta,
            urlTargets = rule.urlTargets,
            cookieTargets = rule.cookieTargets,
            geoTargets = rule.geoTargets,
            scheduling = rule.scheduling,
            displaySettings = rule.displaySettings;


        return {
            schemaVersion: 13,
            ubCode: ubCode,
            clientUuid: clientUuid,
            embUuid: embUuid,
            trigger: trigger,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            integrations: integrations,
            event: event,
            version: version,
            parentVersion: parentVersion,
            dimensions: dimensions,
            meta: meta,
            urlTargets: urlTargets,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            scheduling: scheduling,
            displaySettings: displaySettings
        };
    },

    '13': function _(rule /*: ActivationRuleV13*/ ) /*: ActivationRuleV12*/ {
        var ubCode = rule.ubCode,
            clientUuid = rule.clientUuid,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            integrations = rule.integrations,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            dimensions = rule.dimensions,
            meta = rule.meta,
            urlTargets = rule.urlTargets,
            cookieTargets = rule.cookieTargets,
            geoTargets = rule.geoTargets,
            scheduling = rule.scheduling,
            displaySettings = rule.displaySettings;


        return {
            schemaVersion: 12,
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            integrations: integrations,
            event: event,
            version: version,
            parentVersion: parentVersion,
            dimensions: dimensions,
            meta: _extends({}, meta, {
                clientUuid: clientUuid
            }),
            urlTargets: urlTargets,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            scheduling: scheduling,
            displaySettings: displaySettings
        };
    },

    '12': function _(rule /*: ActivationRuleV12*/ ) /*: ActivationRuleV11*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            integrations = rule.integrations,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            dimensions = rule.dimensions,
            meta = rule.meta,
            urlTargets = rule.urlTargets,
            cookieTargets = rule.cookieTargets,
            geoTargets = rule.geoTargets,
            displaySettings = rule.displaySettings;


        return {
            schemaVersion: 11,
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            integrations: integrations,
            event: event,
            version: version,
            parentVersion: parentVersion,
            dimensions: dimensions,
            meta: meta,
            urlTargets: urlTargets,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            displaySettings: displaySettings
        };
    },

    '11': function _(rule /*: ActivationRuleV11*/ ) /*: ActivationRuleV10*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            displaySettings = rule.displaySettings,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            dimensions = rule.dimensions,
            meta = rule.meta,
            cookieTargets = rule.cookieTargets,
            urlTargets = rule.urlTargets,
            integrations = rule.integrations,
            geoTargets = rule.geoTargets;

        // only keep country code rules, discard city and region because
        // earlier schemas don't have them. This eliminates duplicates

        var newRules = rule.geoTargets.rules.filter(function(rule) {
            return !rule.hasOwnProperty('city') && !rule.hasOwnProperty('regionCode') && rule.hasOwnProperty('countryCode');
        }).map(function(rule) {
            return {
                type: 'countryCode',
                // $FlowFixMe Flow can't infer I only have GeoTargetWithCountry at this point
                value: rule.countryCode,
                visibility: rule.visibility
            };
        });

        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            dimensions: dimensions,
            meta: meta,
            cookieTargets: cookieTargets,
            geoTargets: {
                enabled: rule.geoTargets.enabled,
                rules: newRules
            },
            urlTargets: urlTargets,
            integrations: integrations,
            schemaVersion: 10
        };
    },

    '10': function _(rule /*: ActivationRuleV10*/ ) /*: ActivationRuleV9*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            integrations = rule.integrations,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            meta = rule.meta,
            urlTargets = rule.urlTargets,
            cookieTargets = rule.cookieTargets,
            geoTargets = rule.geoTargets,
            displaySettings = rule.displaySettings;
        var _rule$dimensions = rule.dimensions,
            mobileEnabled = _rule$dimensions.mobileEnabled,
            desktop = _rule$dimensions.desktop,
            mobile = _rule$dimensions.mobile;

        var dimensions = void 0;

        // if-cases here are to satisfy Flow, which wants explicitness when defining union type members
        if (mobileEnabled === true) {
            dimensions = {
                mobileEnabled: true,
                desktop: desktop,
                mobile: mobile
            };
        } else if (mobileEnabled === false) {
            dimensions = {
                mobileEnabled: false,
                desktop: desktop,
                mobile: mobile
            };
        } else {
            dimensions = {
                mobileEnabled: null,
                desktop: desktop,
                mobile: mobile
            };
        }

        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            integrations: integrations,
            event: event,
            version: version,
            parentVersion: parentVersion,
            meta: meta,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            urlTargets: urlTargets,
            schemaVersion: 9,
            dimensions: dimensions
        };
    },

    '9': function _(rule /*: ActivationRuleV9*/ ) /*: ActivationRuleV8*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            dimensions = rule.dimensions,
            meta = rule.meta,
            urlTargets = rule.urlTargets,
            cookieTargets = rule.cookieTargets,
            geoTargets = rule.geoTargets,
            displaySettings = rule.displaySettings;


        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            dimensions: dimensions,
            meta: meta,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            urlTargets: urlTargets,
            schemaVersion: 8
        };
    },

    '8': function _(rule /*: ActivationRuleV8*/ ) /*: ActivationRuleV7*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            dimensions = rule.dimensions,
            meta = rule.meta,
            urlTargets = rule.urlTargets,
            cookieTargets = rule.cookieTargets,
            geoTargets = rule.geoTargets;


        var displaySettings = {
            name: 'overlay'
        };

        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            dimensions: dimensions,
            meta: meta,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            urlTargets: urlTargets,
            schemaVersion: 7
        };
    },

    '7': function _(rule /*: ActivationRuleV7*/ ) /*: ActivationRuleV6*/ {
        var domain = rule.urlTargets.domain;

        var urlTargets = {
            include: rule.urlTargets.rules.filter(function(t) {
                return t.visibility === 'show';
            }).map(function(targetV6) {
                var value = targetV6.value,
                    type = targetV6.type;


                return {
                    domain: domain,
                    type: type,
                    val: value
                };
            }),
            exclude: rule.urlTargets.rules.filter(function(t) {
                return t.visibility === 'hide';
            }).map(function(targetV6) {
                var value = targetV6.value,
                    type = targetV6.type;


                return {
                    domain: domain,
                    type: type,
                    val: value
                };
            })
        };

        var cookieTargets = rule.cookieTargets;

        var cookieTarget = cookieTargets.enabled && cookieTargets.rules.length > 0 ? {
            type: (cookieTargets.rules[0].visibility /*: Visibility*/ ),
            name: cookieTargets.rules[0].name
        } : {
            type: 'none',
            name: null
        };

        var geoTargets = {
            enabled: rule.geoTargets.enabled,
            rules: rule.geoTargets.rules.map(function(t) {
                return {
                    property: t.type,
                    value: t.value
                };
            })
        };

        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            displaySettings = rule.displaySettings,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            dimensions = rule.dimensions;


        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            dimensions: dimensions,
            meta: _extends({}, rule.meta, {
                targetDomain: domain
            }),
            cookieTarget: cookieTarget,
            geoTargets: geoTargets,
            urlTargets: urlTargets,
            schemaVersion: 6
        };
    },

    '6': function _(rule /*: ActivationRuleV6*/ ) /*: ActivationRuleV5*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            dimensions = rule.dimensions,
            displaySettings = rule.displaySettings,
            published = rule.published,
            referrerTargets = rule.referrerTargets,
            urlTargets = rule.urlTargets,
            cookieTarget = rule.cookieTarget,
            geoTargets = rule.geoTargets,
            meta = rule.meta,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion;


        var frequency = rule.frequency;

        if (frequency.name === 'visitCount' && frequency.parameters[0].value === '1') {
            frequency.name = 'firstVisit';
        }

        return {
            ubCode: ubCode,
            embUuid: embUuid,
            meta: meta,
            urlTargets: urlTargets,
            trigger: trigger,
            displaySettings: displaySettings,
            dimensions: dimensions,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            cookieTarget: cookieTarget,
            geoTargets: geoTargets,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            schemaVersion: 5
        };
    },

    '5': function _(rule /*: ActivationRuleV5*/ ) /*: ActivationRuleV4*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            displaySettings = rule.displaySettings,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            urlTargets = rule.urlTargets,
            cookieTarget = rule.cookieTarget,
            geoTargets = rule.geoTargets,
            meta = rule.meta,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion;


        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            urlTargets: urlTargets,
            cookieTarget: cookieTarget,
            geoTargets: geoTargets,
            meta: meta,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            schemaVersion: 4
        };
    },

    '4': function _(rule /*: ActivationRuleV4*/ ) /*: ActivationRuleV3*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            displaySettings = rule.displaySettings,
            published = rule.published,
            frequency = rule.frequency,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            meta = rule.meta,
            cookieTarget = rule.cookieTarget,
            geoTargets = rule.geoTargets,
            urlTargets = rule.urlTargets;


        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            frequency: frequency,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            meta: meta,
            cookieTarget: cookieTarget,
            geoTargets: geoTargets,
            urlTargets: urlTargets,
            schemaVersion: 3
        };
    },

    '3': function _(rule /*: ActivationRuleV3*/ ) /*: ActivationRuleV2*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            displaySettings = rule.displaySettings,
            published = rule.published,
            frequency = rule.frequency,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            meta = rule.meta,
            cookieTarget = rule.cookieTarget,
            urlTargets = rule.urlTargets;


        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            frequency: frequency,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            meta: meta,
            cookieTarget: cookieTarget,
            urlTargets: urlTargets,
            schemaVersion: 2
        };
    },

    '2': function _(rule /*: ActivationRuleV2*/ ) /*: ActivationRuleV1*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            displaySettings = rule.displaySettings,
            published = rule.published,
            frequency = rule.frequency,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            meta = rule.meta,
            urlTargets = rule.urlTargets;


        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            frequency: frequency,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            meta: meta,
            targets: urlTargets,
            schemaVersion: 1
        };
    },

    '1': function _(rule /*: ActivationRuleV1*/ ) /*: ActivationRuleV0*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            displaySettings = rule.displaySettings,
            published = rule.published,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            meta = rule.meta,
            targets = rule.targets;


        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            meta: meta,
            targets: targets
        };
    }
};

var upgrade = {
    '16': function _(rule /*: ActivationRuleV16*/ ) /*: ActivationRuleV17*/ {
        var ubCode = rule.ubCode,
            clientUuid = rule.clientUuid,
            embUuid = rule.embUuid,
            variants = rule.variants,
            trigger = rule.trigger,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            meta = rule.meta,
            urlTargets = rule.urlTargets,
            cookieTargets = rule.cookieTargets,
            geoTargets = rule.geoTargets,
            scheduling = rule.scheduling;


        return {
            schemaVersion: 17,
            ubCode: ubCode,
            clientUuid: clientUuid,
            embUuid: embUuid,
            variants: variants,
            trigger: trigger,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            integrations: {
                googleAnalytics: {
                    enabled: rule.integrations.googleAnalytics.enabled,
                    appendVariant: false
                }
            },
            event: event,
            version: version,
            parentVersion: parentVersion,
            meta: meta,
            urlTargets: urlTargets,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            scheduling: scheduling
        };
    },

    '15': function _(rule /*: ActivationRuleV15*/ ) /*: ActivationRuleV16*/ {
        var ubCode = rule.ubCode,
            clientUuid = rule.clientUuid,
            embUuid = rule.embUuid,
            variants = rule.variants,
            trigger = rule.trigger,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            integrations = rule.integrations,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            dimensions = rule.dimensions,
            meta = rule.meta,
            urlTargets = rule.urlTargets,
            cookieTargets = rule.cookieTargets,
            geoTargets = rule.geoTargets,
            scheduling = rule.scheduling,
            displaySettings = rule.displaySettings;


        return {
            schemaVersion: 16,
            ubCode: ubCode,
            clientUuid: clientUuid,
            embUuid: embUuid,
            variants: variants.map(function(variant) {
                return {
                    letter: variant.letter,
                    trackingId: variant.trackingId,
                    weight: variant.weight,
                    dimensions: dimensions,
                    display: displaySettings
                };
            }),
            trigger: trigger,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            integrations: integrations,
            event: event,
            version: version,
            parentVersion: parentVersion,
            meta: meta,
            urlTargets: urlTargets,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            scheduling: scheduling
        };
    },

    '14': function _(rule /*: ActivationRuleV14*/ ) /*: ActivationRuleV15*/ {
        var ubCode = rule.ubCode,
            clientUuid = rule.clientUuid,
            embUuid = rule.embUuid,
            variantLetter = rule.variantLetter,
            trigger = rule.trigger,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            integrations = rule.integrations,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            dimensions = rule.dimensions,
            meta = rule.meta,
            urlTargets = rule.urlTargets,
            cookieTargets = rule.cookieTargets,
            geoTargets = rule.geoTargets,
            scheduling = rule.scheduling,
            displaySettings = rule.displaySettings;


        return {
            schemaVersion: 15,
            ubCode: ubCode,
            clientUuid: clientUuid,
            embUuid: embUuid,
            variants: [{
                // The first variant has its trackingId set equal to the rule's ID. This will allow us to
                // query stats for the variant using the trackingId and receive all stats that were
                // recorded under the activation rule ID prior to us allowing multiple variants.
                letter: variantLetter,
                trackingId: id,
                weight: 1
            }],
            trigger: trigger,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            integrations: integrations,
            event: event,
            version: version,
            parentVersion: parentVersion,
            dimensions: dimensions,
            meta: meta,
            urlTargets: urlTargets,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            scheduling: scheduling,
            displaySettings: displaySettings
        };
    },

    '13': function _(rule /*: ActivationRuleV13*/ ) /*: ActivationRuleV14*/ {
        var ubCode = rule.ubCode,
            clientUuid = rule.clientUuid,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            integrations = rule.integrations,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            dimensions = rule.dimensions,
            meta = rule.meta,
            urlTargets = rule.urlTargets,
            cookieTargets = rule.cookieTargets,
            geoTargets = rule.geoTargets,
            scheduling = rule.scheduling,
            displaySettings = rule.displaySettings;


        return {
            schemaVersion: 14,
            ubCode: ubCode,
            clientUuid: clientUuid,
            embUuid: embUuid,
            variantLetter: 'a',
            trigger: trigger,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            integrations: integrations,
            event: event,
            version: version,
            parentVersion: parentVersion,
            dimensions: dimensions,
            meta: meta,
            urlTargets: urlTargets,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            scheduling: scheduling,
            displaySettings: displaySettings
        };
    },

    '12': function _(rule /*: ActivationRuleV12*/ ) /*: ActivationRuleV13*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            integrations = rule.integrations,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            dimensions = rule.dimensions,
            urlTargets = rule.urlTargets,
            cookieTargets = rule.cookieTargets,
            geoTargets = rule.geoTargets,
            scheduling = rule.scheduling,
            displaySettings = rule.displaySettings;

        var _rule$meta = rule.meta,
            clientUuid = _rule$meta.clientUuid,
            meta = _objectWithoutProperties(_rule$meta, ['clientUuid']);

        return {
            schemaVersion: 13,
            ubCode: ubCode,
            clientUuid: clientUuid,
            embUuid: embUuid,
            trigger: trigger,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            integrations: integrations,
            event: event,
            version: version,
            parentVersion: parentVersion,
            dimensions: dimensions,
            meta: meta,
            urlTargets: urlTargets,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            scheduling: scheduling,
            displaySettings: displaySettings
        };
    },

    '11': function _(rule /*: ActivationRuleV11*/ ) /*: ActivationRuleV12*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            integrations = rule.integrations,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            dimensions = rule.dimensions,
            meta = rule.meta,
            urlTargets = rule.urlTargets,
            cookieTargets = rule.cookieTargets,
            geoTargets = rule.geoTargets,
            displaySettings = rule.displaySettings;


        return {
            schemaVersion: 12,
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            integrations: integrations,
            event: event,
            version: version,
            parentVersion: parentVersion,
            dimensions: dimensions,
            meta: meta,
            urlTargets: urlTargets,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            scheduling: {
                enabled: false,
                startTime: 0,
                endTime: 0
            },
            displaySettings: displaySettings
        };
    },

    '10': function _(rule /*: ActivationRuleV10*/ ) /*: ActivationRuleV11*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            displaySettings = rule.displaySettings,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            dimensions = rule.dimensions,
            meta = rule.meta,
            cookieTargets = rule.cookieTargets,
            urlTargets = rule.urlTargets,
            integrations = rule.integrations,
            geoTargets = rule.geoTargets;


        var newRules = rule.geoTargets.rules.filter(function(rule) {
            return rule.type === 'countryCode';
        }).map(function(rule) {
            return {
                countryCode: rule.value,
                visibility: rule.visibility
            };
        });

        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            dimensions: dimensions,
            meta: meta,
            cookieTargets: cookieTargets,
            geoTargets: {
                enabled: rule.geoTargets.enabled,
                rules: newRules
            },
            urlTargets: urlTargets,
            integrations: integrations,
            schemaVersion: 11
        };
    },

    '9': function _(rule /*: ActivationRuleV9*/ ) /*: ActivationRuleV10*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            displaySettings = rule.displaySettings,
            id = rule.id,
            integrations = rule.integrations,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            meta = rule.meta,
            urlTargets = rule.urlTargets,
            cookieTargets = rule.cookieTargets,
            geoTargets = rule.geoTargets;
        var _rule$dimensions2 = rule.dimensions,
            mobileEnabled = _rule$dimensions2.mobileEnabled,
            desktop = _rule$dimensions2.desktop,
            mobile = _rule$dimensions2.mobile;

        var dimensions = void 0;

        // if-cases here are to satisfy Flow, which wants explicitness when defining union type members
        if (mobileEnabled === true) {
            dimensions = {
                desktopEnabled: true,
                mobileEnabled: true,
                desktop: desktop,
                mobile: mobile
            };
        } else if (mobileEnabled === false) {
            dimensions = {
                desktopEnabled: true,
                mobileEnabled: false,
                desktop: desktop,
                mobile: mobile
            };
        } else {
            dimensions = {
                desktopEnabled: null,
                mobileEnabled: null,
                desktop: desktop,
                mobile: mobile
            };
        }

        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            dimensions: dimensions,
            meta: meta,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            urlTargets: urlTargets,
            integrations: integrations,
            schemaVersion: 10
        };
    },

    '8': function _(rule /*: ActivationRuleV8*/ ) /*: ActivationRuleV9*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            displaySettings = rule.displaySettings,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            dimensions = rule.dimensions,
            meta = rule.meta,
            urlTargets = rule.urlTargets,
            cookieTargets = rule.cookieTargets,
            geoTargets = rule.geoTargets;


        var integrations = {
            googleAnalytics: {
                enabled: false
            }
        };

        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            dimensions: dimensions,
            meta: meta,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            urlTargets: urlTargets,
            integrations: integrations,
            schemaVersion: 9
        };
    },

    '7': function _(rule /*: ActivationRuleV7*/ ) /*: ActivationRuleV8*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            displaySettings = rule.displaySettings,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            dimensions = rule.dimensions,
            meta = rule.meta,
            urlTargets = rule.urlTargets,
            cookieTargets = rule.cookieTargets,
            geoTargets = rule.geoTargets;


        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            dimensions: dimensions,
            meta: meta,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            urlTargets: urlTargets,
            schemaVersion: 8
        };
    },

    '6': function _(rule /*: ActivationRuleV6*/ ) /*: ActivationRuleV7*/ {
        var _rule$meta2 = rule.meta,
            targetDomain = _rule$meta2.targetDomain,
            meta = _objectWithoutProperties(_rule$meta2, ['targetDomain']);

        var include = rule.urlTargets.include.map(function(target) {
            return {
                type: target.type,
                value: target.val,
                visibility: 'show'
            };
        });

        var exclude = rule.urlTargets.exclude.map(function(target) {
            return {
                type: target.type,
                value: target.val,
                visibility: 'hide'
            };
        });

        var urlTargets = {
            domain: targetDomain,
            rules: include.concat(exclude)
        };

        var cookieTargets = {
            enabled: rule.cookieTarget.type !== 'none',
            rules: rule.cookieTarget.type !== 'none' ? [{
                visibility: rule.cookieTarget.type,
                name: rule.cookieTarget.name
            }] : []
        };

        var geoTargets = {
            enabled: rule.geoTargets.enabled,
            rules: rule.geoTargets.rules.map(function(t) {
                return {
                    type: t.property,
                    visibility: 'show',
                    value: t.value
                };
            })
        };

        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            displaySettings = rule.displaySettings,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            dimensions = rule.dimensions;


        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            dimensions: dimensions,
            meta: meta,
            cookieTargets: cookieTargets,
            geoTargets: geoTargets,
            urlTargets: urlTargets,
            schemaVersion: 7
        };
    },

    '5': function _(rule /*: ActivationRuleV5*/ ) /*: ActivationRuleV6*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            displaySettings = rule.displaySettings,
            dimensions = rule.dimensions,
            published = rule.published,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            meta = rule.meta,
            cookieTarget = rule.cookieTarget,
            geoTargets = rule.geoTargets,
            urlTargets = rule.urlTargets;


        var frequency = {
            name: rule.frequency.name === 'firstVisit' ? 'visitCount' : rule.frequency.name,
            parameters: rule.frequency.parameters
        };

        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            dimensions: dimensions,
            frequency: frequency,
            published: published,
            referrerTargets: referrerTargets,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            meta: meta,
            cookieTarget: cookieTarget,
            geoTargets: geoTargets,
            urlTargets: urlTargets,
            schemaVersion: 6
        };
    },

    '4': function _(rule /*: ActivationRuleV4*/ ) /*: ActivationRuleV5*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            displaySettings = rule.displaySettings,
            published = rule.published,
            frequency = rule.frequency,
            referrerTargets = rule.referrerTargets,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            meta = rule.meta,
            cookieTarget = rule.cookieTarget,
            geoTargets = rule.geoTargets,
            urlTargets = rule.urlTargets;


        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            frequency: frequency,
            referrerTargets: referrerTargets,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            meta: meta,
            cookieTarget: cookieTarget,
            geoTargets: geoTargets,
            urlTargets: urlTargets,
            dimensions: {
                mobileEnabled: null,
                desktop: {
                    width: 0,
                    height: 0
                },
                mobile: {
                    width: 0,
                    height: 0
                }
            },
            schemaVersion: 5
        };
    },

    '3': function _(rule /*: ActivationRuleV3*/ ) /*: ActivationRuleV4*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            displaySettings = rule.displaySettings,
            published = rule.published,
            frequency = rule.frequency,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            meta = rule.meta,
            cookieTarget = rule.cookieTarget,
            geoTargets = rule.geoTargets,
            urlTargets = rule.urlTargets;


        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            frequency: frequency,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            meta: meta,
            cookieTarget: cookieTarget,
            geoTargets: geoTargets,
            urlTargets: urlTargets,
            referrerTargets: {
                enabled: false,
                rules: []
            },
            schemaVersion: 4
        };
    },

    '2': function _(rule /*: ActivationRuleV2*/ ) /*: ActivationRuleV3*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            displaySettings = rule.displaySettings,
            published = rule.published,
            frequency = rule.frequency,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            meta = rule.meta,
            cookieTarget = rule.cookieTarget,
            urlTargets = rule.urlTargets;


        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            frequency: frequency,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            meta: meta,
            cookieTarget: cookieTarget,
            urlTargets: urlTargets,
            geoTargets: {
                enabled: false,
                rules: []
            },
            schemaVersion: 3
        };
    },

    '1': function _(rule /*: ActivationRuleV1*/ ) /*: ActivationRuleV2*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            displaySettings = rule.displaySettings,
            published = rule.published,
            frequency = rule.frequency,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            meta = rule.meta,
            targets = rule.targets;


        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            frequency: frequency,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            meta: meta,
            cookieTarget: {
                type: 'none'
            },
            urlTargets: targets,
            schemaVersion: 2
        };
    },

    '0': function _(rule /*: ActivationRuleV0*/ ) /*: ActivationRuleV1*/ {
        var ubCode = rule.ubCode,
            embUuid = rule.embUuid,
            trigger = rule.trigger,
            displaySettings = rule.displaySettings,
            published = rule.published,
            id = rule.id,
            event = rule.event,
            version = rule.version,
            parentVersion = rule.parentVersion,
            meta = rule.meta,
            targets = rule.targets;


        return {
            ubCode: ubCode,
            embUuid: embUuid,
            trigger: trigger,
            displaySettings: displaySettings,
            published: published,
            id: id,
            event: event,
            version: version,
            parentVersion: parentVersion,
            meta: meta,
            targets: targets,
            frequency: {
                name: 'everyVisit',
                parameters: [{
                    name: 'visitFrequency',
                    value: '1'
                }]
            },
            schemaVersion: 1
        };
    }
};

function getRuleSchemaVersion(rule) {
    return typeof rule.schemaVersion === 'undefined' ? 0 : rule.schemaVersion;
}

function isVersionValid(version) {
    return version === 0 || typeof version === 'number' && typeof upgrade[version - 1] === 'function' && typeof downgrade[version] === 'function';
}

function validate(inputVersion, outputVersion) {
    if (!isVersionValid(inputVersion)) {
        throw new Error('Rule has unknown schema version: ' + inputVersion);
    }

    if (!isVersionValid(outputVersion)) {
        throw new Error('Requested upgrade to unknown schema version: ' + outputVersion);
    }
}

function upgradeActivationRule(outputVersion /*: number*/ ) {
    return function(rule /*: AnyActivationRule*/ ) /*: AnyActivationRule*/ {
        var inputVersion = getRuleSchemaVersion(rule);

        validate(inputVersion, outputVersion);

        if (inputVersion < outputVersion) {
            // Upgrade the version by 1 and recurse
            var nextRule = upgrade[inputVersion](rule);
            return upgradeActivationRule(outputVersion)(nextRule);
        }

        if (inputVersion > outputVersion) {
            // Downgrade the version by 1 and recurse
            var _nextRule = downgrade[inputVersion](rule);
            return upgradeActivationRule(outputVersion)(_nextRule);
        }

        return rule;
    };
}

var ACTIVATION_RULE_VERSION = exports.ACTIVATION_RULE_VERSION = Object.keys(downgrade).map(function(stringVersion) {
    return parseInt(stringVersion, 10);
}).sort(function(a, b) {
    return b - a;
})[0];